func val(int a b) int : return 700 + a + b
run map.map.int {
  map.map.int ret = {"test": {`zero`:0,"one":1}, `next`:{`val`:val(3,4)}}
  return ret
}
===== map[test:map[zero:0 one:1] next:map[val:707]]
run map.arr.int {
  map.arr.int ret = {"test": {0,1}, `next`:{2,3}}
  ret[`next`][0] = 7
  return ret
}
===== map[test:[0 1] next:[7 3]]
run arr.map {
  arr.map ret = {{"test": "val"}
                 {`next`:"value 2"}}
  ret[0][`new`] = "new value " + ret[0][`test`] 
  return ret
}
===== [map[test:val new:new value val] map[next:value 2]]
run arr.arr.int {
  arr.arr.int ret = {{1, 2, 3}, {4,5,6,7}}
  ret[0][2] = 9
  return ret
}
===== [[1 2 9] [4 5 6 7]]
run map {
  map.str ret = {"test": "qqq",
       `1`:`as` + `df`
  }
  return ret
}
===== map[test:qqq 1:asdf]
run arr.bool {
  arr.bool mb = : true, false, true
  return mb
}
===== [true false true]
run arr.str {
  arr myr = {"test",`asdf`,}
  return myr
}
===== [test asdf]
run arr.int {
  arr.int myarr = {10, 
    20,3+5
    6*11,
    33}
  myarr[0] += myarr[1]
  return myarr
}
===== [30 20 8 66 33]
run arr.int {
  arr.int myarr 
  myarr += 7
  myarr += 5
  myarr[0] += myarr[1]
  return myarr
}
===== [12 5]
func fixMap(map.int par) {
  map.int ret
  ret[`third`] = 1
  par[`oops`] = 99
  par = ret
}
run map.int {
  map.int mymap
  mymap[`one`] = 33
  mymap[`two`] = 44
  fixMap(mymap)
  mymap[`four`] = 55
  return mymap
}
===== map[third:1 four:55]
func fixArr(arr par) {
  arr ret
  ret += `third`
  par = ret
}
run arr {
  arr myarr
  myarr += `one`
  myarr += `two`
  fixArr(myarr)
  myarr += `four`
  return myarr
}
===== [third four]
run map.arr.map.int {
  map.arr.map.int dest src
  arr.map.int asrc adest
  map.int mi m1 m2
  m1[`first`] = 1
  m1[`second`] = 2
  asrc += m1
  m2 = m1
  m2[`second`] = 3
  asrc += m2
  adest = asrc
  src[`0`] = adest
  dest = src
  mi[`last`]= 100
  src[`0`][0] = mi
  return dest
}
===== map[0:[map[first:1 second:2] map[first:1 second:3]]]
func new_map(int i) map.int {
  map.int ret
  for j in 1..2 {
    ret[str(j)]= j + i
  }
  return ret
}
run arr.map.int {
  arr.map.int myarr
  int sum

  for i in 0..1 {
    myarr += new_map(i+2)
  }
  myarr[0] = new_map(10)
  return myarr
}
===== [map[1:11 2:12] map[1:4 2:5]]
func new_arr(int i) arr.int {
  arr.int ret
  for j in 1..i {
    ret += j
  }
  return ret
}
run int {
  map.arr.int mymap
  int sum

  for i in 1..5 {
    mymap[str(i)] = new_arr(i+2)
  }
  for iarr in mymap {
    sum += *iarr
    for v in iarr {
      sum += v
    }
  }
  return sum
}
===== 105
run int {
  map.int mymap
  int sum
  for i in 1..5 {
    mymap[str(i)] = i  
    sum += mymap[str(i)]
  }
  return sum
}
===== 15
run map {
  map mymap
  mymap[`test`] = `true`
  mymap[``] = `false`
  mymap[`те`] = `тест`
  return mymap
}
===== map[test:true :false те:тест]
run arr.bool {
  arr.bool bib
  bib += true
  bib += false
  bib += !false
  return bib
}
===== [true false true]
func newStr(arr.arr ina) {
    arr item
    item += str(*ina)
    ina += item
}
func newInt(arr.arr.int ina, int i) {
    arr.int item
    item += *ina + i
    ina += item
}
run str {
  arr.arr bigs
  arr.arr.int bigi
  newStr(bigs)
  newStr(bigs)
  newInt(bigi, *bigs)
  newInt(bigi, *bigi + *bigs)
  return bigs[1][0] + str(bigi[1][0]) + str(bigi[0][0])
}
===== 142
run int {
  arr.int ina 
  arr.str ins
  ina += 10
  ins += `10`
  return ina[0] + int(ins[0]) + *ina + *ins
}
===== 22
run str {
  arr ina 
  int i1 i2
  for i in 0..10000 {
    ina += str(i)
    i1 += i
  }
  for item in ina {
    i2 += int(item)
  }
  return "\{i1} == \{i2}"
}
===== 50005000 == 50005000
run arr {
  arr ina out
  ina += `one`
  ina += `two`
  for item in ina {
    out += item
    ina[1] = `ok`
  }
  return out
}
===== [one ok]
run arr {
  arr array
  array += `out`
  return array += `result`
}
===== [out result]
run str {
  arr array
  array += `1п00`
  array[0+0][3*1] = 'р'
  return array[0*21] + array[0*21][2+2-1]
}
===== 1п0рр
run str {
  arr array
  array += `1`
  array[0] = `zero`
  return array[0]
}
===== zero
run str {
  arr array
  array += `first`
  array += `second`
  return str(*array) + " \{array[0]} " + array[1]
}
===== 2 first second
run int { 
  int ret
  for i, j in 3..5-7 {
    if j & 1 == 0 : ret *= i
    else : ret += i
  } 
  return ret
}
===== -4
run int { 
  int ret
  for i in 1..5 : ret += i
  return ret
}
===== 15
run str { 
  str tmp = `aΣz`
  for ch, i in tmp {
    if i < 5 : tmp += ch
  }
  return tmp
}
===== aΣzaΣz
func getStr str {
  return `t1μ=`
}
run str { 
  str dest out
  for ch, i in getStr() {
      dest += `%{ch}%{i}`
      for dch in dest : out += dch
  }
  return out
}
===== t0t011t011μ2t011μ2=3
run str { 
  str dest
  for ch, i in `strΔ` {
    dest += "\{i}\{ch}"
  }
  return dest
}
===== 0s1t2r3Δ
run str { 
  str dest
  str src = `Ω0123`
  for ch in src {
    dest += ch
  }
  return dest
}
===== Ω0123
run str { 
  str s = `01 Ê123`
  s += s[2] = '\u0102'
  return s
}
===== 01ĂÊ123Ă
run str { 
  int a = 1
  char tmp = '\u0398'
  str s = `0Ê123`
  return s[2] + s[3-(2+1)] + s[2*a/2] + tmp
}
===== 10ÊΘ
const {
  CHAR = '\u0102'
  CHAR2 = 'Ê'
}
run str : return CHAR + CHAR2
===== ĂÊ
run str {
  char empty
  str out = "\{'a'} " + str('a'!='\n') + ` %{'b'}` + str(int(empty)) + str(empty)
  return out + `%{'\n'< '1'} %{'ф' >= 'Ф'} %{'a'<='A'} %{int(' ') + int('\u03B1')}`
} 
===== a true b32 true true false 977
run str {
  char my_ch = '\u03b1'
  str ch = 'a' + (' ' + '=' + '\t') + '\'' + '\"' + '\\' + '\x7A' + my_ch
  return ch += '0'
} 
===== a =	'"\zα0
run int {
  int a
  if true : a = 10; if false {a= 20} else {a+=30}
  return a
} 
===== 40
run int : return 891
===== 891
run str {
  str s 
  if *s == 0 : s = `the first line
the second line`
  return s
}
===== the first line\nthe second line
run int {
  int i 
  if i>10 : i = 10
  else : i = 6; i+=4
  return i
}
===== 10
run str {
  $ЧИСЛО = 10
  $строка = `стр$ок%а ${ЧИСЛО}`
  return $ echo ${строка}=
}
===== стр$ок%а 10=\n
run str {
  $BOOL = 10 == 10; str bs = 10 != 10
  $INT = 123; str is = 321
  $STR = `string`
  return $BOOL + $INT + $STR + bs + is
}
===== true123stringfalse321
run bool {
  str stemp = `My Go path: %{$GOPATH}`
  $MYVAR = stemp
  return stemp == $MYVAR
}
===== true
run hello {
  $ echo test
}
===== <nil>
run str {
  str name = $ echo count: %{ "10 1" + ` 2` }
  return $ echo %{name} %{20+10}!
}
===== count: 10 1 2\n 30!\n
run hello str {
  str name = "world"
  return $ echo Hello, %{name}!
}
===== Hello, world!\n
run str { 
  $ dir
  str ret = $ echo `result "value"` тест  tt
  ret += $ echo "your name"
  return ret + $ echo 10 a 'b' {} ()
}
===== result "value" тест tt\nyour name\n10 a b {} ()\n
run str {
  return $ echo "hello"
}
===== hello\n
run myname str { 
  return `checking run myname`
}
===== checking run myname
#! gentee
###
  variable = value
###
run int { 
  str st = "four"
  return *`begin %{ `10` + "value\{20}"}`+*st
}
===== 19
run str { 
  return "\{1} \{"expression\{1-3}"}"
}
===== 1 expression-2
run str { 
  str stest = `%{"str"}$qqq %{10}qq %{ "abc" > `%{0+2}` } `
  return stest + `end%{
  33*2
  }`
}
===== str$qqq 10qq true end66
run str {
  str s = `a%{`b`}c`
  return s
}
===== abc
run str { 
  str stest = "те\nст `stri\"ng`
 line"
  stest += " ooops\u263a "
  return stest + "" + "finish"
}
===== те\nст `stri"ng`\n line ooops☺ finish
run str { 
  str test = `тест`
  str stemp = str(`тест` == test)
  return (stemp += str(test<`auto`)) + str(test!=`Тест`) + str(int( `aB`>=`aa`)) + 
         str(int(`-234`) == -234) + str(int( int(`0xfF`) <= 255 )) + str(bool(0))
}
===== truefalsetrue0true1false
run str { 
  str stemp = ```begin end```
  return `tes``t тест` + ` ` + `` + `new
 line ` + stemp
}
===== tes`t тест new\n line `begin end`
run int {
  int ТЕСт = 33
  int UNi_TECT = 22
  return ТЕСт + UNi_TECT
}
===== 55
run int { 
  int a = 1
  int b = 4
  a++
  --b
  return ++a * (--b + a++) + b-- + a + b}
===== 22
run int { 
  int a = 1
  a <<=4
  a >>=3
  a &= 0xff
  a |= 0x100
  return a^=0xffff}
===== 65277
run int { 
  int a b c
  a = 22
  c = 33;c/=3;c*=5;c%=7
  return a+=b-=10+c}
===== 6
run int { return 1+~(1-0xFE12)*2}
===== 130081
run int { return ((1<<0)+ 2 << 1+3) >> 2}
===== 12
run int { return 234/17 + 234 % 17 + 20%7 }
===== 32
run int {
  int a = 0xf0 | 1 & 0 
  return (a | 0x177) & 0x33 ^ 0x122
}
===== 273
const 2*IOTA + IOTA {FIRST SECOND // comment
  /* comment */
    THIRD} 
run int { return THIRD + FIRST - SECOND }
===== 3
const 10+23 {TEST TEST2}
run int { 
  return TEST + TEST2
}
===== 66
const {
MY_PAR = (100000 + CYCLE)/10000}
run int { 
  return MY_PAR
}
===== 1610
run int { 
  return 2*DEPTH + 33
}
===== 2033
run int { 
   return 1+ ?(5>0, 22*3, 5/0) - ?(3==2, 
      7/0, ?(
       true, (3+4)*5, 0))
}
===== 32
run int { if 1+3==4 || 100/0 == 1 {
    if true && 50>12 && 34==23 {
      return 8
    }
    if 10 != 10 || 5<3 || 7==7 {return 9}
    return 10
}
return 0
}
===== 9
run bool { return 8==8 && 100!=99 && 6<20}
===== true
run bool { return 8==9 || false || 100!=100}
===== false
run bool { return true || false && 10<5 || 7>0}
===== true
func factorial(int i) int {
  if i <= 1 {return 1}
  return i*factorial(i-1)
}
run int { return factorial(10)}
===== 3628800
run int { 
  int i; while i<0x10 {i = i+1};return i 
}
===== 16
run int { 
  int i = 67+89
  int k = i+10
  return i-k
}
===== -10
run int { 
  int i
  bool b
  if b=!b {i=7}
  return i
}
===== 7
run int { 
  int i j k
  i = j = 5+(k=60/5)*2
  return (k+j)*2 + i
}
===== 111
func param(int par) int {par=par+23;return par}
run int { 
  return param(8)
}
===== 31
func ifelse(int par) int {
  if -par == 10 {
    return 100
  } elif par < 0 { return 2 } 
  elif par <= 2 { return 3
  } elif par > 89 { return 4 } elif par >= 83 {
    return 5
  } 
  else { return par + 7 }
  return 200
}
run int { 
  return ifelse(-10) + ifelse(-5) + ifelse(2) + 
     ifelse(83) + ifelse(100)+ifelse(10)
}
===== 131
run int { 
  if true {
     if !true { return 77 } else {
     if 10==-(-10) { if 7!=8 {return 99}
  }}}
  return 0
}
===== 99
func name(int itype inext, int third) int {
  return (itype+inext)*third
}
func name(int par ipar) int {
  return par+ipar
}
func name(int itype) int {
  return itype*2
}
run int { 
  return name(2) + name(3, 7) + name(1,2,4)
}
===== 26
func name() int {
  return 5
}
func name(int itype) int {
  return itype+2
}
run int { 
  return name(101)*name()
}
===== 515
run int { 
  if true {
    34
    return 12/4+1
  }
  return 0
}
===== 4
run bool { 
  return true
}
===== true
run int { 
  /* return 100 */
  return 10 + /*test*/ 20 /**test**/ + /*
  comment
   */ 17 /*Comments*/
}
/* comment */
===== 47
// comment
run int { 
  // return 100
  return 10 +  // Comments
   20 // Comments
  return 22
}
// comment
===== 30
run int 
{ 
  -10
  ()
  Add(10,20)
  return 78
}
===== 78
run int { return Add(10, 5)+Mul( 1, 20) +Sub(Mul(7,Div(121,Add(1,1)+ 9)), Sign(3))-10}
===== 105
run int { return Add(Sign(-10), 67+33)}
===== 110
run int { return 2*    
4-  
    -(57 
      - 0xaa)*
    2}
===== -218

run int { return 3*(45-(30+2)/(6-((2 + 2)*2 - 4)))}
===== 87
run int { return 5+(45-30)*(1+3)/(6-1-1) + 10}
===== 30
run int { return 9-5 + 2*6/4 }
===== 7
run int { return 10+34/2 - -6*3 }
===== 45
run int { return -0XaB }
===== -171
run { -(-200) }
===== <nil>
run {}
===== <nil>
run {return}
===== <nil>
run int {return 77}
===== 77
run int {return 0647}
===== 423
