struct mytype {
  int a
  str b
  buf c
}

run map {
  mytype t = {a: 77, b: `ok`, c: {'1','2','3'}}
  arr.mytype a = {t}
  return cnv6(a)
}
===== map[a:77 b:ok c:[49 50 51]]
run str {
  obj o = obj(`This is a string`)
  set set1 = {2, 3, 5, 6, 8, 9}
  return cnv4(o) + str(cnv5(set1))
}
===== THIS IS A STRING11001001001
run map.arr.int {
  map.arr.int s = {`a`:{1,2}}
  map.arr.int r = cnv1(s)
  arr a1 = {`5`, `6`}
  arr.int a2 = cnv2(a1)
  r[`c`] = a2
  arr.bool m1 = {true, false, true}
  r[`d`] = cnv3(m1)
  return r
}
===== map[a2:[2 3] c:[6 7] d:[0 1 0]]
run {
  ErrConvert()
}
===== [2:3] Cannot convert *struct { Par1 string; Par2 int } to any Gentee type
run arr {
  str s1 = "s1"
  return rtStrStack("param", "s2")
}
===== [s1 s1 param s2]
run {
  mustErr()
}
===== [2:3] custom error
run {
  custErr("OK")
}
===== [2:3] string OK is too long
run str {
  return varPar("ok") + varPar("A", "B") + varPar("C", 7, "D") + custErr("Z")
}
===== okABC7DZZ
run int {
  return varInt() + varInt(7) + varInt(4, 5, 6)
}
===== 22
run str {
  return str(45 == `45`) + str(123 == `50`)
}
===== truefalse
run str {
  return nopars() 
}
===== [2:19] function returns wrong type
run str {
  nopars() 
  return retStr() + ParStr(`0`) + str(Sum(3,4))
}
===== retStr0011